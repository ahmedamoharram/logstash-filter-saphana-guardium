input {
  beats {
    port => "20514"
    type => "filebeat"
    #ssl => true
    #ssl_certificate => "${SSL_DIR}/app.crt" 
    #ssl_key => "${SSL_DIR}/app.key"     
  }
}

filter{
  if [type]=="filebeat" {
  
      # This is a grok pattern to parse the syslog into event fields, you can test the pattern here: https://grokdebugger.com/
      # For SAP HANA field desc, please check this:
      # https://help.sap.com/docs/SAP_HANA_PLATFORM/b3ee5778bc2e4a089d3299b82ec762a7/0a57444d217649bf94a19c0b68b470cc.html
      grok{
        match => { "message" =>"%{TIMESTAMP_ISO8601:timestamp};%{DATA:servicename};%{DATA:Hostname};%{DATA:SERVICE_NAME};%{DATA:instancenumber};%{DATA:Port_Number};%{DATA:Schema_NAME};%{DATA:Client_IP};%{DATA:Client_Name};%{DATA:clientprocessid};%{DATA:Client_Port_Number};%{DATA:policyname};%{DATA:auditlevel};%{DATA:Audit_Action};%{DATA:Active_User};%{DATA:schema};%{DATA:object};%{DATA:privilegename};%{DATA:grantable};%{DATA:rolename};%{DATA:principal};%{DATA:Action_Status};%{DATA:Component};%{DATA:Section};%{DATA:Parameter};%{DATA:OldValue};%{DATA:NewValue};%{DATA:Comment};%{DATA:Executed_Statement};%{POSINT:Session_ID};%{DATA:Application_username};%{DATA:RoleSchemaName};%{DATA:GranteeSchemaName};%{DATA:OriginDatabaseName};%{DATA:OriginUserName};%{DATA:XSApplicationUserName};%{DATA:SOURCE_PROGRAM};%{GREEDYDATA:rest}" }
      }
      
      #mutate { uppercase => ["policyname"] }
      
      # Skip the Guadium filter if the message was not parsed successfully or not a Guardium policy
      #if "_grokparsefailure" not in [tags] and "GUARDIUM" in [policyname] {
      if "_grokparsefailure" not in [tags] {
      
        # Debugging
        mutate { add_field => { "[DEBUG_SHOW_EVENTS_PROCESSED_COUNT]" => "true" }}
        #mutate { add_field => { "[DEBUG_SHOW_DATA]" => "true" }}
        mutate { add_field => { "[DEBUG_SHOW_OUTPUT_JSON]" => "true" }}
        
        ruby { code => "event.set('ts', event.get('timestamp'))" }
        
        # Add the OS user, the same as the Application_username
        mutate { add_field => { "[OS_Username]" => "%{Application_username}" }}
        
        # Add the Server IP, IP has to be splitted from the port
        ruby { code => "event.set('serverIP', event.get('log')['source']['address'].split(':')[0])" }
        
        # For this to work, "- add_locale: ~" must be added in the filebeat.ynl file under the "processors:" section
        if [beat][timezone] {
            mutate { add_field => { "TZ" => "%{[beat][timezone]}" } }
        }
        else {
            mutate { add_field => { "TZ" => "%{[event][timezone]}" } }
        }
        grok { match => { "TZ" => "(?<minutes>[^:]*):(?<seconds>[^,]*)" } }
        grok { match => { "minutes" => "(?<offset_diff>[^[0-9]]*)%{GREEDYDATA:actual_minutes}" } }
        ruby { code => "event.set('minutes1', event.get('actual_minutes').to_i * 60)" }
        ruby { code => "event.set('offset1', event.get('minutes1') +  event.get('seconds').to_i)" }
        mutate { add_field => { "totalOffset" => "%{offset_diff}%{offset1}" } }		
        
        fingerprint {
          source => ["ts", "Session_ID", "Executed_Statement"]
          concatenate_sources => true
        }
        
        #check if db user exists or not, if it doesnt, use the principal field (happens in case of LOGIN_FAILED event)
        if ![Active_User]{
          mutate { add_field => { "[Active_User]" => "%{principal}" }}
        }
        
        # Only LOGIN_FAILED and SQL_ERROR are permitted in the Audit_Action field, which will be mappped to ExceptionTypeId
        if [Action_Status]=="UNSUCCESSFUL" {
          if [Audit_Action]=="CONNECT" {
            mutate { update => { "[Audit_Action]" => "LOGIN_FAILED" }}
          } else { # Probably this will not happen, as SAP HANA does not audit SQL errors.
            mutate { update => { "[Audit_Action]" => "SQL_ERROR" }}
          }
        }
        
        # Double quotation will cause parse issues in Guardium
        mutate { gsub => ["Executed_Statement","\"",""]}
        
        saphana_guardium_plugin_filter{}
        
        mutate{ remove_field =>["instancenumber","priority","policyname","servicename","clientprocessid","schema","rest","object","facility","XSApplicationUserName","severity","SERVICE_NAME","Schema_NAME","Client_IP","Client_Port_Number","Port_Number","Client_Name","type","@version","Executed_Statement","Audit_Action","Active_User","SOURCE_PROGRAM","Hostname","Session_ID","auditlevel","pid","program","logsource","facility_label","facility_label","host","severity_label","DEBUG_SHOW_OUTPUT_JSON","DEBUG_SHOW_EVENTS_PROCESSED_COUNT","DEBUG_SHOW_DATA","Action_Status","principal","Comment","@timestamp","timestamp","message","finalTime","fingerprint","ts"]} #"Application_username","OS_Username","totalOffset"
     }   
  }
} # end filter

output {
  stdout {}
}